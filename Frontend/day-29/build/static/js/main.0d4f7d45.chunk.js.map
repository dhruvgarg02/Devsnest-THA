{"version":3,"sources":["component/CurrencySelector.js","actions/index.js","component/Card.js","App.js","reducers/fromCurrencyReducer.js","reducers/toCurrencyReducer.js","reducers/apiDataReducer.js","reducers/index.js","store.js","index.js"],"names":["CurrencySelector","dispatch","useDispatch","from","useSelector","state","fromCurrency","to","toCurrency","apiData","id","className","onChange","e","type","payload","updateFromCurrency","target","value","updateToCurrency","onClick","fetch","process","then","response","json","data","getApiData","Card","Object","keys","length","App","fromCurrencyReducer","action","toCurrencyReducer","apiDataReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d4f7d45.chunk.js","sourcesContent":["import \"../style/currencySelector.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateFromCurrency, updateToCurrency, getApiData} from \"../actions\";\n\nconst CurrencySelector = () => {\n\n    const dispatch = useDispatch();\n\n    const from = useSelector((state) => state.fromCurrency)\n    const to = useSelector((state) => state.toCurrency)\n    const apiData = useSelector((state) => state.apiData)\n\n    return (<div>\n        <select id=\"from-currency\" className=\"dropdown-content\" onChange={e => {\n            dispatch(updateFromCurrency(e.target.value));\n        }}\n        >\n            <option value=\"\">Select From</option>\n            <option value=\"BTC\">Bitcoin</option>\n            <option value=\"DICE\">Etheroll</option>\n            <option value=\"XRP\">Ripple</option>\n            <option value=\"ADA\">Cardano</option>\n            <option value=\"XLM\">Stellar</option>\n            <option value=\"LINK\">Chainlink</option>\n            <option value=\"UNI\">Uniswap</option>\n            <option value=\"DOT\">Polkadot</option>\n            <option value=\"DOGE\">DogeCoin</option>\n            <option value=\"DOPE\">DopeCoin</option>\n            <option value=\"USD\">US Dollar</option>\n            <option value=\"INR\">Indian Rupee</option>\n            <option value=\"EUR\">Euro</option>\n            <option value=\"JPY\">Japanese Yen</option>\n            <option value=\"GBP\">British Pound Sterling</option>\n            <option value=\"AUD\">Australian Dollar</option>\n            <option value=\"CAD\">Canadian Dollar</option>\n            <option value=\"CHF\">Swiss Franc</option>\n            <option value=\"CAD\">Canadian Dollar</option>\n            <option value=\"NZD\">New Zealand Dollar</option>\n        </select>\n\n        <select id=\"to-currency\" className=\"dropdown-content\" onChange={e => {\n            dispatch(updateToCurrency(e.target.value));\n        }}\n        >\n            <option value=\"\">Select To</option>\n            <option value=\"USD\">US Dollar</option>\n            <option value=\"INR\">Indian Rupee</option>\n            <option value=\"EUR\">Euro</option>\n            <option value=\"JPY\">Japanese Yen</option>\n            <option value=\"GBP\">British Pound Sterling</option>\n            <option value=\"AUD\">Australian Dollar</option>\n            <option value=\"CAD\">Canadian Dollar</option>\n            <option value=\"CHF\">Swiss Franc</option>\n            <option value=\"CAD\">Canadian Dollar</option>\n            <option value=\"NZD\">New Zealand Dollar</option>\n\n        </select>\n\n        <button onClick={() => {\n            dispatch(getApiData(from, to))\n        }}>Submit\n        </button>\n    </div>)\n}\n\nexport default CurrencySelector","const updateFromCurrency = (from) => {\n    return {\n        type: \"UPDATE_FROM\",\n        payload: from,\n    };\n};\n\nconst updateToCurrency = (to) => {\n    return {\n        type: \"UPDATE_TO\",\n        payload: to,\n    };\n};\n\nconst getApiData = (from, to) => {\n    const API_KEY = process.env.REACT_APP_FINANCE_API_KEY;\n    return (dispatch) => {\n        fetch(\n            `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=${from}&to_currency=${to}&apikey=${API_KEY}`\n        ).then(response => response.json())\n            .then(data => {\n                dispatch({\n                    type: \"GET_API_DATA\",\n                    payload: data,\n                })\n            })\n    }\n}\nexport {updateFromCurrency, updateToCurrency, getApiData};","import '../style/card.css';\nimport {useSelector} from \"react-redux\";\n\nconst Card = () => {\n    const data = useSelector((state) => state.apiData);\n    return (\n        Object.keys(data).length === 0 ? <h2>Select Currencies</h2> :\n        data[\"Realtime Currency Exchange Rate\"] ?\n            <div className=\"card\">\n                <h3>From: {data[\"Realtime Currency Exchange Rate\"][\"2. From_Currency Name\"]}</h3>\n                <h3>To: {data[\"Realtime Currency Exchange Rate\"][\"4. To_Currency Name\"]}</h3>\n                <h3>Exchange Rate: {data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]}</h3>\n                <h3>Last Updated: {data[\"Realtime Currency Exchange Rate\"][\"6. Last Refreshed\"]} (UTC)</h3>\n            </div> : (data[\"Error Message\"]) ? <h2>Invalid API call</h2> : <h2>API Limit Reached</h2>\n    )\n}\n\nexport default Card","import './App.css';\nimport CurrencySelector from \"./component/CurrencySelector\";\nimport Card from \"./component/Card\";\nimport {useState} from \"react\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CurrencySelector />\n            <Card />\n        </div>\n    );\n}\n\nexport default App;","const fromCurrencyReducer = (state = \"BTC\", action) => {\n    if (action.type === \"UPDATE_FROM\") {\n        return action.payload;\n    }\n    return state;\n}\n\nexport default fromCurrencyReducer;","const toCurrencyReducer = (state = \"\", action) => {\n    if (action.type === \"UPDATE_TO\") {\n        return action.payload;\n    }\n    return state;\n}\n\nexport default toCurrencyReducer;","const apiDataReducer = (state = {}, action) => {\n    if (action.type === \"GET_API_DATA\") {\n        return action.payload;\n    }\n    return state;\n}\n\nexport default apiDataReducer;","import {combineReducers} from 'redux';\nimport fromCurrencyReducer from \"./fromCurrencyReducer\";\nimport toCurrencyReducer from \"./toCurrencyReducer\";\nimport apiDataReducer from \"./apiDataReducer\";\n\nconst rootReducer = combineReducers({\n    fromCurrency: fromCurrencyReducer,\n    toCurrency: toCurrencyReducer,\n    apiData: apiDataReducer,\n})\n\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from\"redux-thunk\"\n\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}